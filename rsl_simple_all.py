#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π RSL –ø–∞—Ä—Å–µ—Ä —Å —Ñ–ª–∞–≥–æ–º --all
"""

import asyncio
from pathlib import Path
import argparse
import re
import base64
import hashlib
from datetime import datetime

try:
    from playwright.async_api import async_playwright
except ImportError:
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ playwright: pip install playwright")
    exit(1)

async def save_book_description(page, output_dir):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    try:
        print("üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏...")
        
        # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_button_xpath = '//*[@id="app"]/div[1]/div[1]/div/ul/li[7]/button'
        try:
            info_button = await page.query_selector(f'xpath={info_button_xpath}')
            if info_button:
                await info_button.click()
                await asyncio.sleep(2)
        except:
            pass
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        book_info = await page.evaluate('''
            () => {
                const info = {};
                
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–Ω–∏–≥–∏
                const titleSelectors = ['h1', 'h2', '.title', '[class*="title"]'];
                for (let selector of titleSelectors) {
                    const elem = document.querySelector(selector);
                    if (elem && elem.textContent.trim().length > 10) {
                        let title = elem.textContent.trim();
                        // –£–±–∏—Ä–∞–µ–º "[–¢–µ–∫—Å—Ç]" –∏ –ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–∏–ø–∏—Å–∫–∏
                        title = title.replace(/\\s*\\[.*?\\]\\s*$/g, '').trim();
                        info.title = title;
                        break;
                    }
                }
                
                // –ê–≤—Ç–æ—Ä
                const authorSelectors = ['[class*="author"]', '.creator', '.metadata .author'];
                for (let selector of authorSelectors) {
                    const elem = document.querySelector(selector);
                    if (elem && elem.textContent.trim()) {
                        info.author = elem.textContent.trim();
                        break;
                    }
                }
                
                // –ì–æ–¥
                const allText = document.body.innerText || '';
                const yearMatch = allText.match(/\\b(1[89]\\d{2}|20\\d{2})\\b/g);
                if (yearMatch) {
                    info.year = yearMatch[yearMatch.length - 1];
                }
                
                info.url = window.location.href;
                info.date = new Date().toISOString().split('T')[0];
                
                return info;
            }
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        desc_file = Path(output_dir) / 'description.txt'
        with open(desc_file, 'w', encoding='utf-8') as f:
            if book_info.get('title'):
                f.write(f"{book_info['title']}\n\n")
            
            if book_info.get('author'):
                f.write(f"–ê–≤—Ç–æ—Ä: {book_info['author']}\n")
            
            if book_info.get('year'):
                f.write(f"–ì–æ–¥: {book_info['year']}\n")
            
            f.write(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {book_info['url']}\n")
            f.write(f"–°–∫–∞—á–∞–Ω–æ: {book_info['date']}\n")
        
        print(f"   ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {desc_file.name}")
        return book_info
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None

async def extract_book_images(book_id, max_pages=50, headless=True):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ background-image —Å—Ç–∏–ª–µ–π"""
    
    # –ü–∞–ø–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ ID –∫–Ω–∏–≥–∏
    output_dir = Path(book_id)
    output_dir.mkdir(exist_ok=True)
    
    async with async_playwright() as p:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        browser = await p.chromium.launch(headless=headless)
        context = await browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        )
        
        page = await context.new_page()
        saved_images = 0
        saved_hashes = set()
        consecutive_failures = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥
        
        base_url = f"https://viewer.rsl.ru/ru/{book_id}"
        print(f"üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É: {base_url}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await page.goto(f"{base_url}?page=1", wait_until='networkidle', timeout=20000)
        await asyncio.sleep(3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        book_info = await save_book_description(page, output_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–≤—å—é
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–≤—å—é –≤–Ω–∏–∑ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            await page.evaluate('''
                () => {
                    const scrollContainer = document.querySelector('.sidebar__scroll-container');
                    if (scrollContainer) {
                        scrollContainer.scrollTop = scrollContainer.scrollHeight;
                    }
                }
            ''')
            await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø—Ä–µ–≤—å—é
            
            total_pages = await page.evaluate('''
                () => {
                    // –ò—â–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü
                    const previewItems = document.querySelectorAll('.preview-list__item');
                    if (previewItems && previewItems.length > 0) {
                        console.log('Found preview items:', previewItems.length);
                        return previewItems.length;
                    }
                    
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä - –≤—Å–µ li —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–≤—å—é
                    const listItems = document.querySelectorAll('.preview-viewer__scroll-container li');
                    if (listItems && listItems.length > 0) {
                        console.log('Found list items:', listItems.length);
                        return listItems.length;
                    }
                    
                    // –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
                    const allLi = document.querySelectorAll('.sidebar__container li');
                    if (allLi && allLi.length > 0) {
                        console.log('Found sidebar items:', allLi.length);
                        return allLi.length;
                    }
                    
                    return null;
                }
            ''')
            
            if total_pages:
                print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–Ω–∏–≥–µ")
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º max_pages 
                if max_pages == 500:  # –ï—Å–ª–∏ —Ä–µ–∂–∏–º --all
                    max_pages = total_pages
                    print(f"üéØ –ë—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω–æ –≤—Å–µ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
                elif total_pages < max_pages:
                    max_pages = total_pages
                    print(f"üìé –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ–≥–æ –≤ –∫–Ω–∏–≥–µ)")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        
        print(f"\nüì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö)...\n")
        
        for page_num in range(1, max_pages + 1):
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}...", end=" ")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_url = f"{base_url}?page={page_num}"
            await page.goto(page_url, wait_until='networkidle', timeout=20000)
            await asyncio.sleep(2)
            
            saved = False
            
            try:
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å background-image
                background_image_data = await page.evaluate('''
                    () => {
                        const elements = document.querySelectorAll('*');
                        
                        for (let element of elements) {
                            const computedStyle = window.getComputedStyle(element);
                            const bgImage = computedStyle.backgroundImage;
                            
                            if (bgImage && bgImage.includes('data:image/jpeg')) {
                                const match = bgImage.match(/url\\("?(data:image\\/jpeg;base64,[^"]+)"?\\)/);
                                if (match) {
                                    return [{ dataUrl: match[1] }];
                                }
                            }
                        }
                        
                        return [];
                    }
                ''')
                
                if background_image_data and len(background_image_data) > 0:
                    data_url = background_image_data[0]['dataUrl']
                    
                    if data_url and data_url.startswith('data:image/jpeg'):
                        try:
                            img_data = base64.b64decode(data_url.split(',')[1])
                            
                            if len(img_data) > 5000:
                                img_hash = hashlib.md5(img_data).hexdigest()
                                
                                if img_hash not in saved_hashes:
                                    image_path = output_dir / f"page_{page_num:04d}.jpg"
                                    with open(image_path, 'wb') as f:
                                        f.write(img_data)
                                    
                                    saved_hashes.add(img_hash)
                                    saved_images += 1
                                    size_kb = len(img_data) // 1024
                                    print(f"‚úÖ {size_kb}KB")
                                    saved = True
                                    consecutive_failures = 0
                                else:
                                    print("‚ö†Ô∏è –¥—É–±–ª–∏–∫–∞—Ç")
                                    consecutive_failures += 1
                            else:
                                print(f"‚ö†Ô∏è –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö")
                                consecutive_failures += 1
                        except Exception as e:
                            print(f"‚ùå –æ—à–∏–±–∫–∞: {e}")
                            consecutive_failures += 1
                else:
                    print("‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    consecutive_failures += 1
                    
            except Exception as e:
                print(f"‚ùå –æ—à–∏–±–∫–∞: {e}")
                consecutive_failures += 1
            
            if not saved:
                consecutive_failures += 1
            
            # –ï—Å–ª–∏ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            if consecutive_failures >= 5:
                print(f"\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: {consecutive_failures} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥")
                break
            
            await asyncio.sleep(0.8)
        
        await browser.close()
        return saved_images, book_info, output_dir

def extract_book_id(url):
    """–ò–∑–≤–ª–µ—á—å ID –∫–Ω–∏–≥–∏ –∏–∑ URL"""
    match = re.search(r'(rsl\d+)', url)
    return match.group(1) if match else None

async def main():
    parser = argparse.ArgumentParser(description='RSL –ø–∞—Ä—Å–µ—Ä —Å —É–º–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π')
    parser.add_argument('url', help='URL –∫–Ω–∏–≥–∏ –Ω–∞ viewer.rsl.ru')
    parser.add_argument('--pages', type=int, default=20, help='–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)')
    parser.add_argument('--all', action='store_true', help='–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–∫–∞—á–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ 500)')
    parser.add_argument('--show-browser', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä')
    
    args = parser.parse_args()
    
    book_id = extract_book_id(args.url)
    if not book_id:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∫–Ω–∏–≥–∏ –∏–∑ URL: {args.url}")
        return
    
    print(f"üìö ID –∫–Ω–∏–≥–∏: {book_id}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    if args.all:
        max_pages = 500  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ --all
        print(f"üîÑ –†–µ–∂–∏–º: —Å–∫–∞—á–∞—Ç—å –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É–º–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö)")
    else:
        max_pages = args.pages
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {args.pages}")
    
    print(f"üìÅ –ü–∞–ø–∫–∞: {book_id}/")
    
    saved_count, book_info, output_dir = await extract_book_images(
        book_id,
        max_pages=max_pages,
        headless=not args.show_browser
    )
    
    if saved_count > 0:
        print(f"\nüéâ –ì–û–¢–û–í–û! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(f"üìÅ –ü–∞–ø–∫–∞: {output_dir}/")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        files = list(output_dir.glob("*.jpg"))
        if files:
            total_size = sum(f.stat().st_size for f in files)
            total_size_mb = total_size / (1024 * 1024)
            print(f"üìä –†–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        if book_info and book_info.get('title'):
            print(f"üìñ –ö–Ω–∏–≥–∞: {book_info['title']}")
            if book_info.get('author'):
                print(f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book_info['author']}")
            print(f"üíæ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ description.txt")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())